this file is my reference test no worries dude
<div>
          <label htmlFor='images'>Images</label>
          <input
            type='file'
            id='images'
            accept='image/*'
            onChange={uploadFileHandler}
          />
          {images.length > 0 && (
            <div className='image-preview'>
              {images.map((image, index) => (
                <div key={index} className='image-item'>
                  <img
                    src={image}
                    alt={`Image ${index + 1}`}
                    className='img-thumbnail'
                  />
                </div>
              ))}
            </div>
          )}
        </div>


        const uploadFileHandler = (e) => {
    const file = e.target.files[0]
    if (file) {
      const reader = new FileReader()
      reader.onloadend = () => {
        setImages((prevImages) => [...prevImages, reader.result]) // Update the images array with the base64 data URL
      }
      reader.readAsDataURL(file)
    }
  }


import jwt from 'jsonwebtoken'

const generateToken = (res, userId) => {
  // Create a JWT token with the userId as payload
  const token = jwt.sign({ userId }, process.env.KEUR_EXPRESS, {
    expiresIn: '30d', // Set token expiration to 30 days
  })

  // Set the cookie with the token
  res.cookie('jwt', token, {
    httpOnly: true, // Prevents client-side JavaScript from accessing the cookie
    secure: process.env.NODE_ENV === 'production', // Set to true only in production
    sameSite: 'strict', // Prevents CSRF attacks
    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days in milliseconds
  })
}

export default generateToken


--legacy-peer-deps